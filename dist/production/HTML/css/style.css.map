{"version":3,"sources":["style.scss","style.css","include/_variables.scss","include/_fonts.scss","include/_icons.scss","include/plugins/_sprite-mixin.scss","include/plugins/_sprite.scss","include/_keyframes.scss","include/_common.scss","include/plugins/_include-media.scss","include/_typography.scss","include/_buttons.scss","include/_forms.scss","components/_page.scss","components/_header.scss","components/_footer.scss"],"names":[],"mappings":"AAAA;;ECEE;ADCF;;;;;;;;;;;;wCCYwC;ACDxC,cAAA;AACA;EAEI,gBAAQ;EACR,eAAO;EACP,iBAAS;EACT,gBAAQ;EACR,eAAO;EACP,cAAM;EAGN,4BAAgB;EAChB,8BAAkB;EACrB,0BAAa;EAEV,uBAAA;EACA,0BAAS;EACT,4CAAW;EACX,wDAAY;EAGZ,sBAAiB;EACjB,8CAAsB;EACtB,gDAAwB;EACxB,oCAAe;EAEf,UAAA;EACA,yBAAkB;EAClB,wBAAmB;EACnB,qBAAgB;ADJpB;;ACgBA;EACC;IACI,0BAAa;EDbhB;AACF;;ACgBA,iBAAA;AACA;EACE,kCAAgB;ADblB;;ACgBA;EACE,kCAAgB;ADblB;;AEtDA,UAAA;AFyDA;EGxDI,qBAAqB;EACrB,sBAAsB;EACtB,cAAc;EACd,wBAAwB;EACxB,4BAA4B;EAC5B,kCAAkC;AH0DtC;;AGtDI,gBAAA;AHyDJ;EGvDQ,qBAAqB;EACrB,sBAAsB;EACtB,cAAc;AHyDtB;;AAEA;EGxDY,WAAW;EACX,cAAc;AH0D1B;;AItDQ;EArBJ,6CAA6C;ECqF/C,4BAjEuC;EAuDvC,WAvD6C;EA2D7C,aA3DoD;AL8DtD;;AItEI;EASI;IAjBJ,gDAAgD;IC6GlD,2BA7FiE;ELoEjE;AACF;;AM1FA,eAAA;AACA;EACI;IACI,UAAU;EN6FhB;EM3FE;IACI,UAAU;EN6FhB;AACF;AMnGA;EACI;IACI,UAAU;EN6FhB;EM3FE;IACI,UAAU;EN6FhB;AACF;;AM1FA;EACI;IACI,UAAU;EN6FhB;EM3FE;IACI,UAAU;EN6FhB;AACF;;AMnGA;EACI;IACI,UAAU;EN6FhB;EM3FE;IACI,UAAU;EN6FhB;AACF;;AM1FA;EACI;IACI,UAAU;EN6FhB;EM3FE;IACI,UAAU;EN6FhB;EM3FE;IACI,UAAU;EN6FhB;AACF;;AMtGA;EACI;IACI,UAAU;EN6FhB;EM3FE;IACI,UAAU;EN6FhB;EM3FE;IACI,UAAU;EN6FhB;AACF;;AM1FA;EACI;IACI,gCAAwB;YAAxB,wBAAwB;IACxB,+BAAuB;YAAvB,uBAAuB;EN6F7B;EM3FE;IACI,gCAAwB;YAAxB,wBAAwB;IACxB,iCAAyB;YAAzB,yBAAyB;EN6F/B;AACF;;AMrGA;EACI;IACI,gCAAwB;YAAxB,wBAAwB;IACxB,+BAAuB;YAAvB,uBAAuB;EN6F7B;EM3FE;IACI,gCAAwB;YAAxB,wBAAwB;IACxB,iCAAyB;YAAzB,yBAAyB;EN6F/B;AACF;;AOpIA,SAAA;AACA;EACI,mCAAmC;EACnC,kCAAkC;EAClC,wCAAwC;APuI5C;;AO1IA;EAQQ,8BAAsB;UAAtB,sBAAsB;APsI9B;;AOlIA;EACI,WAAW;APqIf;;AOlIA;;EAEI,iCAAiC;APqIrC;;AOlIA;EACI,YAAY;EACZ,gCAAgC;APqIpC;;AOvIA;EAKQ,cAAc;EACpB,mBAAmB;APsIrB;;AQwYI;EDphBJ;IAUQ,cAAc;EPuIpB;AACF;;AQkYI;EDphBJ;IAcQ,gBAAgB;EPyItB;AACF;;AOtIA;EACI,oBAAa;EAAb,oBAAa;EAAb,aAAa;EACb,4BAAsB;EAAtB,6BAAsB;MAAtB,0BAAsB;UAAtB,sBAAsB;EACtB,gBAAgB;EAChB,SAAS;EACT,6CAA6C;EAC7C,0DAAkD;UAAlD,kDAAkD;EAClD,oBAAoB;EACpB,wBAAwB;EACxB,8BAA8B;EAC9B,yBAAyB;EACzB,0BAA0B;EAC1B,sBAAsB;EACtB,UAAU;EACV,gBAAgB;APyIpB;;AOvJA;EAoBQ,UAAU;EACV,iBAAiB;EACjB,iCAAyB;EAAzB,yBAAyB;EACzB,oCAA4B;EAA5B,4BAA4B;APuIpC;;AOpII;EACI,gBAAgB;APuIxB;;AOnIA;;EAEI,eAAe;APsInB;;AOxIA;;EAKQ,aAAa;APwIrB;;AOpIA;EACI,wBAAwB;EACxB,UAAU;EACV,YAAY;EACZ,6BAA6B;EAC7B,wBAAgB;UAAhB,gBAAgB;APuIpB;;AOpIA;;;EAGI,qBAAqB;EACrB,eAAe;EACf,YAAY;EACZ,cAAc;EACd,YAAY;APuIhB;;AOpIA;EACI,qBAAqB;EACrB,cAAc;APuIlB;;AOzIA;EAKQ,kBAAkB;APwI1B;;AOpIA;EACI,mBAAY;MAAZ,oBAAY;UAAZ,YAAY;EACZ,sBAAsB;APuI1B;;ASpPA,eAAA;AACA;;;;;;;;;;;;EAYI,gBAAgB;EAChB,yCAAyC;ATuP7C;;ASpPA;;EAEI,aAAa;EACb,yBAAyB;ATuP7B;;ASpPA;;EAEI,aAAa;ATuPjB;;ASpPA;;EAEI,aAAa;EACb,wBAA0B;EAC1B,oBAAuB;EACvB,gBAAgB;EAChB,yBAAyB;ATuP7B;;ASpPA;EACI,qBAAqB;ATuPzB;;ASpPA;EACI,cAAc;EACd,qBAAqB;EACrB,iCAAyB;EAAzB,yBAAyB;ATuP7B;;AS1PA;EAMQ,2BAA2B;ATwPnC;;ASpPA;EACI,oCAAoC;ATuPxC;;ASxPA;EAIQ,wBAAwB;ATwPhC;;ASpPA;EACI,8BAA8B;EAC9B,gCAAgC;ATuPpC;;ASpPA;EACI,gBAAgB;ATuPpB;;ASpPA;EACI,qBAAqB;ATuPzB;;ASpPA;EACI,eAAe;EACf,gBAAgB;EAChB,gBAAgB;EAChB,eAAe;EACf,kBAAsB;EACtB,sBAAsB;ATuP1B;;AS7PA;EASQ,kBAAkB;EAClB,kBAAkB;EAClB,oBAAoB;ATwP5B;;ASnQA;EAcY,kBAAkB;EAClB,UAAa;EACb,OAAO;EACP,WAAW;EACX,QAAQ;EACR,SAAS;EACT,sCAAsC;ATyPlD;;AUrVA,YAAA;AACA;EACI,sBAAsB;EACtB,YAAY;EACZ,aAAa;AVwVjB;;AW5VA,UAAA;AACA;EACI,8BAAsB;UAAtB,sBAAsB;AX+V1B;;AW5VA;EACI,wBAAwB;EACxB,cAAc;EACd,WAAW;EACX,gBAAgB;EAChB,sBAAsB;EACtB,gBAAgB;EAChB,eAAe;EACf,qBAAsB;EACtB,sBAAsB;EACtB,uCAAuC;EACvC,oCAAoC;EACpC,gBAAgB;EAChB,qCAAqC;EACrC,iCAAyB;EAAzB,yBAAyB;EACzB,uFAAuE;EAAvE,+EAAuE;EAAvE,uEAAuE;EAAvE,0FAAuE;AX+V3E;;AW9WA;EAkBQ,kBAAkB;AXgW1B;;AWlXA;EAkBQ,kBAAkB;AXgW1B;;AWlXA;EAkBQ,kBAAkB;AXgW1B;;AWlXA;EAkBQ,kBAAkB;AXgW1B;;AWlXA;EAkBQ,kBAAkB;AXgW1B;;AWlXA;EAuBQ,kCAAkC;AX+V1C;;AW5VI;EACI,wBAAwB;AX+VhC;;AW3VA;EACI,YAAY;AX8VhB;;AW/VA;EAIQ,YAAY;AX+VpB;;AYvYA,SAAA;AACA;EACI,mBAAY;MAAZ,oBAAY;UAAZ,YAAY;EACZ,oBAAa;EAAb,oBAAa;EAAb,aAAa;EACb,4BAAsB;EAAtB,6BAAsB;MAAtB,0BAAsB;UAAtB,sBAAsB;AZ0Y1B;;AYvYA;EACI,mBAAY;MAAZ,oBAAY;UAAZ,YAAY;AZ0YhB;;AYvYA;EACI,wCAAO;EACP,kCAAkC;EAClC,cAAc;AZ0YlB;;AYtYI;EACI,uBAAuB;AZyY/B;;Aa5ZA,WAAA;AACA;EACI,4BAA4B;Ab+ZhC;;AcjaA,WAAA;AACA;EACI,oBAAa;EAAb,oBAAa;EAAb,aAAa;EACb,yBAAmB;MAAnB,sBAAmB;UAAnB,mBAAmB;EACnB,qBAAyB;MAAzB,kBAAyB;UAAzB,yBAAyB;EACzB,iBAAiB;EACjB,yBAAyB;EACzB,oCAAoC;AdoaxC;;AclaI;EACI,eAAe;EACf,uBAAuB;EACvB,yBAAyB;EACzB,kBAAkB;Adqa1B;;AD3YA;;CC+YC","file":"style.css","sourcesContent":["/*!\r\n * https://themeforest.net/user/netgon\r\n */\r\n/* -----------------------------------\r\n * TABLE OF CONTENTS:\r\n * Variables\r\n * Fonts\r\n * PNG Sprite\r\n * Base\r\n * Typography\r\n * Buttons\r\n * Form\r\n * Header\r\n * Page\r\n * Footer\r\n ------------------------------------- */\r\n\r\n// Variables and Mixins\r\n@import \"include/variables\";\r\n@import \"include/plugins\";\r\n\r\n\r\n// Includes\r\n@import \"include/extends\";\r\n@import \"include/fonts\";\r\n@import \"include/icons\";\r\n@import \"include/keyframes\";\r\n@import \"include/common\";\r\n@import \"include/typography\";\r\n@import \"include/buttons\";\r\n@import \"include/forms\";\r\n\r\n\r\n// Components\r\n@import \"components/page\";\r\n@import \"components/header\";\r\n@import \"components/footer\";\r\n\r\n\r\n/**\r\n* Alternative color theme {selector html.theme-color}\r\n*/\r\n@import \"include/theme-default\";","/*!\r\n * https://themeforest.net/user/netgon\r\n */\n/* -----------------------------------\r\n * TABLE OF CONTENTS:\r\n * Variables\r\n * Fonts\r\n * PNG Sprite\r\n * Base\r\n * Typography\r\n * Buttons\r\n * Form\r\n * Header\r\n * Page\r\n * Footer\r\n ------------------------------------- */\n/* Variables */\n:root {\n  --black: #202833;\n  --gray: #626263;\n  --gray-2: #A6B2BF;\n  --white: #ffffff;\n  --blue: #278AFE;\n  --red: #FF5E5E;\n  --primary-color: var(--blue);\n  --secondary-color: var(--blue);\n  --text-color: var(--black);\n  /* Timing transitions */\n  --t-base: 0.2s ease-in-out;\n  --t-smooth: cubic-bezier(.215, .61, .355, 1);\n  --t-elastic: 0.3s cubic-bezier(0.68, -0.55, 0.265, 1.55);\n  --font-size-base: 16px;\n  --font-family-default: 'Open Sans', sans-serif;\n  --font-family-secondary: 'Open Sans', sans-serif;\n  --font-feature: 'pnum' on, 'lnum' on;\n  /* Other */\n  --container-width: 1200px;\n  --container-gutter: 15px;\n  --header-height: 57px;\n}\n\n@media (prefers-color-scheme: dark), (prefers-color-scheme: light) {\n  body {\n    --text-color: var(--black);\n  }\n}\n\n/* Colors theme */\nhtml[data-theme='light'] {\n  --primary-color: var(--blue-color);\n}\n\nhtml[data-theme='dark'] {\n  --primary-color: var(--blue-color);\n}\n\n/* Fonts */\n[class^=\"icon-\"] {\n  display: inline-block;\n  vertical-align: middle;\n  line-height: 1;\n  background-size: contain;\n  background-repeat: no-repeat;\n  background-position: center center;\n}\n\n/* PNG Sprites */\n[class*=\"s-icon\"] {\n  display: inline-block;\n  vertical-align: middle;\n  line-height: 1;\n}\n\n[class*=\"s-icon\"]::before {\n  content: \"\";\n  display: block;\n}\n\n.s-icon-arrow-chevron-right::before {\n  background-image: url(\"__static__sprite.png\");\n  background-position: 0px 0px;\n  width: 67px;\n  height: 123px;\n}\n\n@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n  .s-icon-arrow-chevron-right::before {\n    background-image: url(\"__static__sprite@2x.png\");\n    background-size: 67px 123px;\n  }\n}\n\n/* Animations */\n@keyframes fadeIn {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\n@keyframes fadeOut {\n  0% {\n    opacity: 1;\n  }\n  100% {\n    opacity: 0;\n  }\n}\n\n@keyframes fade {\n  0% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\n@keyframes rotate {\n  from {\n    transform-origin: center;\n    transform: rotate(0deg);\n  }\n  to {\n    transform-origin: center;\n    transform: rotate(360deg);\n  }\n}\n\n/* Base */\n* {\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-tap-highlight-color: transparent;\n}\n\n*, *::before, *::after {\n  box-sizing: border-box;\n}\n\n@-ms-viewport {\n  width: auto;\n}\n\nhtml,\nbody {\n  -webkit-overflow-scrolling: touch;\n}\n\nhtml {\n  height: 100%;\n  font-size: var(--font-size-base);\n}\n\nhtml.rtl {\n  direction: rtl;\n  text-align: inherit;\n}\n\n@media (max-width: 1023px) {\n  html {\n    font-size: 92%;\n  }\n}\n\n@media (max-width: 767px) {\n  html {\n    font-size: 86.5%;\n  }\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  min-height: 100%;\n  margin: 0;\n  font: 400 1rem/1.5 var(--font-family-default);\n  font-feature-settings: var(--font-feature, normal);\n  font-variant: normal;\n  color: var(--text-color);\n  background-color: var(--white);\n  background-repeat: repeat;\n  background-position: 50% 0;\n  background-size: cover;\n  opacity: 0;\n  overflow: hidden;\n}\n\nbody.load {\n  opacity: 1;\n  overflow: initial;\n  transition: var(--t-base);\n  transition-property: opacity;\n}\n\n.open-mobile-menu body {\n  overflow: hidden;\n}\n\na,\nbutton {\n  cursor: pointer;\n}\n\na:focus,\nbutton:focus {\n  outline: none;\n}\n\nbutton {\n  -webkit-appearance: none;\n  padding: 0;\n  border: none;\n  background-color: transparent;\n  box-shadow: none;\n}\n\nimg,\nembed,\nvideo {\n  display: inline-block;\n  max-width: 100%;\n  height: auto;\n  line-height: 1;\n  border: none;\n}\n\nsvg {\n  display: inline-block;\n  line-height: 1;\n}\n\nsvg:not([fill=\"none\"]) {\n  fill: currentColor;\n}\n\npicture {\n  flex-grow: 1;\n  border-radius: inherit;\n}\n\n/* Typography */\nh1,\n.h1,\nh2,\n.h2,\nh3,\n.h3,\nh4,\n.h4,\nh5,\n.h5,\nh6,\n.h6 {\n  font-weight: 300;\n  font-family: var(--font-family-secondary);\n}\n\nh1,\n.h1 {\n  margin-top: 0;\n  text-transform: uppercase;\n}\n\nh2,\n.h2 {\n  margin-top: 0;\n}\n\nh5,\n.h5 {\n  margin-top: 0;\n  margin-bottom: 0.93333em;\n  font-size: 0.9375rem;\n  line-height: 1.2;\n  text-transform: uppercase;\n}\n\np {\n  margin-bottom: 1.5rem;\n}\n\na {\n  color: inherit;\n  text-decoration: none;\n  transition: var(--t-base);\n}\n\na:hover {\n  color: var(--primary-color);\n}\n\n.link-under {\n  border-bottom: 1px solid transparent;\n}\n\n.link-under:hover {\n  border-bottom: 1px solid;\n}\n\n.no-under {\n  border-bottom: none !important;\n  text-decoration: none !important;\n}\n\nb {\n  font-weight: 700;\n}\n\nfigure {\n  margin-bottom: 1.5rem;\n}\n\n.list-styled {\n  padding-left: 0;\n  list-style: none;\n  font-weight: 300;\n  font-size: 18px;\n  line-height: 1.2em;\n  letter-spacing: 0.08em;\n}\n\n.list-styled li {\n  margin-bottom: 1em;\n  position: relative;\n  padding-left: 1.25em;\n}\n\n.list-styled li::before {\n  position: absolute;\n  top: 0.4em;\n  left: 0;\n  content: \"\";\n  width: 0;\n  height: 0;\n  border: 4px solid var(--primary-color);\n}\n\n/* Buttons */\n.button {\n  background-color: none;\n  border: none;\n  outline: none;\n}\n\n/* Forms */\ninput[type=\"search\"] {\n  box-sizing: border-box;\n}\n\n.input {\n  -webkit-appearance: none;\n  display: block;\n  width: 100%;\n  height: 3.125rem;\n  padding: 0.875rem 14px;\n  font-weight: 300;\n  font-size: 16px;\n  line-height: 1.3125em;\n  letter-spacing: 0.08em;\n  font-family: var(--font-family-default);\n  background-color: var(--white-color);\n  border-radius: 0;\n  border: 1px solid var(--gray-color-1);\n  transition: var(--t-base);\n  transition-property: border-color, transform, background-color, opacity;\n}\n\n.input::placeholder {\n  color: var(--gray);\n}\n\n.input:hover, .input:focus {\n  border-color: var(--primary-color);\n}\n\n.error .input {\n  border-color: var(--red);\n}\n\ntextarea {\n  resize: none;\n}\n\ntextarea.input {\n  height: auto;\n}\n\n/* Page */\n.page-wrapper {\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n}\n\n.page-content {\n  flex-grow: 1;\n}\n\n.container {\n  width: min(100%, var(--container-width));\n  padding: 0 var(--container-gutter);\n  margin: 0 auto;\n}\n\n.section__header {\n  margin-bottom: 5.625rem;\n}\n\n/* Header */\n.header {\n  height: var(--header-height);\n}\n\n/* Footer */\n.footer {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  padding: 1.5rem 0;\n  color: var(--white-color);\n  background-color: var(--black-color);\n}\n\n.footer__copyright {\n  font-size: 12px;\n  letter-spacing: 0.025em;\n  text-transform: uppercase;\n  text-align: center;\n}\n\n/**\r\n* Alternative color theme {selector html.theme-color}\r\n*/\n","$generate-sprites: true; // true or false;\n\n$breakpoints: (\n\t'xs': 375px,\n\t'sm': 576px,\n\t'sm-tablet': 768px,\n\t'md': 992px,\n\t'lg-tablet': 1024px,\n\t'lg': 1200px,\n\t'xl': 1366px\n) !default;\n\n\n\n/* Variables */\n:root {\n    // Colors\n    --black: #202833;\n    --gray: #626263;\n    --gray-2: #A6B2BF;\n    --white: #ffffff;\n    --blue: #278AFE;\n    --red: #FF5E5E;\n\n    // Colors theme\n    --primary-color: var(--blue);\n    --secondary-color: var(--blue);\n\t--text-color: var(--black);\n\n    /* Timing transitions */\n    --t-base: 0.2s ease-in-out;\n    --t-smooth: cubic-bezier(.215, .61, .355, 1);\n    --t-elastic: 0.3s cubic-bezier(0.68, -0.55, 0.265, 1.55);\n\n    // Fonts\n    --font-size-base: 16px;\n    --font-family-default: 'Open Sans', sans-serif;\n    --font-family-secondary: 'Open Sans', sans-serif;\n    --font-feature: 'pnum' on, 'lnum' on;\n\n    /* Other */\n    --container-width: 1200px;\n    --container-gutter: 15px;\n    --header-height: 57px;\n\n\t@media screen and (max-width: 1199px) {\n    }\n\n    @media screen and (max-width: 767px) {\n    }\n\n    @media screen and (max-width: 575px) {\n    }\n}\n\n@media (prefers-color-scheme: dark), (prefers-color-scheme: light) {\n\tbody {\n    \t--text-color: var(--black);\n\t}\n}\n\n/* Colors theme */\nhtml[data-theme='light'] {\n  --primary-color: var(--blue-color);\n}\n\nhtml[data-theme='dark'] {\n  --primary-color: var(--blue-color);\n}\n\n$theme-colors: (\n    theme: --primary-color\n);","/* Fonts */","[class^=\"icon-\"] {\n    display: inline-block;\n    vertical-align: middle;\n    line-height: 1;\n    background-size: contain;\n    background-repeat: no-repeat;\n    background-position: center center;\n}\n\n@if $generate-sprites {\n    /* PNG Sprites */\n    [class*=\"s-icon\"] {\n        display: inline-block;\n        vertical-align: middle;\n        line-height: 1;\n\n        &::before {\n            content: \"\";\n            display: block;\n        }\n    }\n\n    @include retina-sprites($retina-groups);\n}","@mixin sprite-image($sprite) {\r\n    background-image: url(\"__static__sprite.png\");\r\n}\r\n\r\n@mixin sprite-image2x($sprite) {\r\n    background-image: url(\"__static__sprite@2x.png\");\r\n}\r\n\r\n@mixin retina-sprite($retina-group) {\r\n    $normal-sprite: nth($retina-group, 2);\r\n    $retina-sprite: nth($retina-group, 3);\r\n    @include sprite($normal-sprite);\r\n\r\n    @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\r\n        @include sprite-image2x($retina-sprite);\r\n        @include sprite-background-size($normal-sprite);\r\n    }\r\n}\r\n\r\n@mixin retina-sprites($retina-groups) {\r\n    @each $retina-group in $retina-groups {\r\n        $sprite-name: nth($retina-group, 1);\r\n        .s-icon-#{$sprite-name} {\r\n            &::before {\r\n                @include retina-sprite($retina-group);\r\n            }\r\n        }\r\n    }\r\n}\r\n","// SCSS variables are information about icon's compiled state, stored under its original file name\n//\n// .icon-home {\n//   width: $icon-home-width;\n// }\n//\n// The large array-like variables contain all information about a single icon\n// $icon-home: x y offset_x offset_y width height total_width total_height image_path;\n//\n// At the bottom of this section, we provide information about the spritesheet itself\n// $spritesheet: width height image $spritesheet-sprites;\n$arrow-chevron-right-name: 'arrow-chevron-right';\n$arrow-chevron-right-x: 0px;\n$arrow-chevron-right-y: 0px;\n$arrow-chevron-right-offset-x: 0px;\n$arrow-chevron-right-offset-y: 0px;\n$arrow-chevron-right-width: 67px;\n$arrow-chevron-right-height: 123px;\n$arrow-chevron-right-total-width: 67px;\n$arrow-chevron-right-total-height: 123px;\n$arrow-chevron-right-image: 'sprite.png';\n$arrow-chevron-right: (0px, 0px, 0px, 0px, 67px, 123px, 67px, 123px, 'sprite.png', 'arrow-chevron-right', );\n$arrow-chevron-right-2x-name: 'arrow-chevron-right@2x';\n$arrow-chevron-right-2x-x: 0px;\n$arrow-chevron-right-2x-y: 0px;\n$arrow-chevron-right-2x-offset-x: 0px;\n$arrow-chevron-right-2x-offset-y: 0px;\n$arrow-chevron-right-2x-width: 134px;\n$arrow-chevron-right-2x-height: 246px;\n$arrow-chevron-right-2x-total-width: 134px;\n$arrow-chevron-right-2x-total-height: 246px;\n$arrow-chevron-right-2x-image: 'dev/img/content';\n$arrow-chevron-right-2x: (0px, 0px, 0px, 0px, 134px, 246px, 134px, 246px, 'dev/img/content', 'arrow-chevron-right@2x', );\n$spritesheet-width: 67px;\n$spritesheet-height: 123px;\n$spritesheet-image: 'sprite.png';\n$spritesheet-sprites: ($arrow-chevron-right, );\n$spritesheet: (67px, 123px, 'sprite.png', $spritesheet-sprites, );\n$retina-spritesheet-width: 134px;\n$retina-spritesheet-height: 246px;\n$retina-spritesheet-image: 'dev/img/content';\n$retina-spritesheet-sprites: ($arrow-chevron-right-2x, );\n$retina-spritesheet: (134px, 246px, 'dev/img/content', $retina-spritesheet-sprites, );\n\n// These \"retina group\" variables are mappings for the naming and pairing of normal and retina sprites.\n//\n// The list formatted variables are intended for mixins like `retina-sprite` and `retina-sprites`.\n$arrow-chevron-right-group-name: 'arrow-chevron-right';\n$arrow-chevron-right-group: ('arrow-chevron-right', $arrow-chevron-right, $arrow-chevron-right-2x, );\n$retina-groups: ($arrow-chevron-right-group, );\n\n// The provided mixins are intended to be used with the array-like variables\n//\n// .icon-home {\n//   @include sprite-width($icon-home);\n// }\n//\n// .icon-email {\n//   @include sprite($icon-email);\n// }\n//\n// Example usage in HTML:\n//\n// `display: block` sprite:\n// <div class=\"icon-home\"></div>\n//\n// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:\n//\n// // CSS\n// .icon {\n//   display: inline-block;\n// }\n//\n// // HTML\n// <i class=\"icon icon-home\"></i>\n@mixin sprite-width($sprite) {\n  width: nth($sprite, 5);\n}\n\n@mixin sprite-height($sprite) {\n  height: nth($sprite, 6);\n}\n\n@mixin sprite-position($sprite) {\n  $sprite-offset-x: nth($sprite, 3);\n  $sprite-offset-y: nth($sprite, 4);\n  background-position: $sprite-offset-x  $sprite-offset-y;\n}\n\n@mixin sprite-image($sprite) {\n  $sprite-image: nth($sprite, 9);\n  background-image: url(#{$sprite-image});\n}\n\n@mixin sprite($sprite) {\n  @include sprite-image($sprite);\n  @include sprite-position($sprite);\n  @include sprite-width($sprite);\n  @include sprite-height($sprite);\n}\n\n// The `retina-sprite` mixin sets up rules and a media query for a sprite/retina sprite.\n//   It should be used with a \"retina group\" variable.\n//\n// The media query is from CSS Tricks: https://css-tricks.com/snippets/css/retina-display-media-query/\n//\n// $icon-home-group: ('icon-home', $icon-home, $icon-home-2x, );\n//\n// .icon-home {\n//   @include retina-sprite($icon-home-group);\n// }\n@mixin sprite-background-size($sprite) {\n  $sprite-total-width: nth($sprite, 7);\n  $sprite-total-height: nth($sprite, 8);\n  background-size: $sprite-total-width $sprite-total-height;\n}\n\n@mixin retina-sprite($retina-group) {\n  $normal-sprite: nth($retina-group, 2);\n  $retina-sprite: nth($retina-group, 3);\n  @include sprite($normal-sprite);\n\n  @media (-webkit-min-device-pixel-ratio: 2),\n         (min-resolution: 192dpi) {\n    @include sprite-image($retina-sprite);\n    @include sprite-background-size($normal-sprite);\n  }\n}\n\n// The `sprites` mixin generates identical output to the CSS template\n//   but can be overridden inside of SCSS\n//\n// @include sprites($spritesheet-sprites);\n@mixin sprites($sprites) {\n  @each $sprite in $sprites {\n    $sprite-name: nth($sprite, 10);\n    .#{$sprite-name} {\n      @include sprite($sprite);\n    }\n  }\n}\n\n// The `retina-sprites` mixin generates a CSS rule and media query for retina groups\n//   This yields the same output as CSS retina template but can be overridden in SCSS\n//\n// @include retina-sprites($retina-groups);\n@mixin retina-sprites($retina-groups) {\n  @each $retina-group in $retina-groups {\n    $sprite-name: nth($retina-group, 1);\n    .#{$sprite-name} {\n      @include retina-sprite($retina-group);\n    }\n  }\n}\n","/* Animations */\r\n@keyframes fadeIn {\r\n    0% {\r\n        opacity: 0;\r\n    }\r\n    100% {\r\n        opacity: 1;\r\n    }\r\n}\r\n\r\n@keyframes fadeOut {\r\n    0% {\r\n        opacity: 1;\r\n    }\r\n    100% {\r\n        opacity: 0;\r\n    }\r\n}\r\n\r\n@keyframes fade {\r\n    0% {\r\n        opacity: 1;\r\n    }\r\n    50% {\r\n        opacity: 0;\r\n    }\r\n    100% {\r\n        opacity: 1;\r\n    }\r\n}\r\n\r\n@keyframes rotate {\r\n    from {\r\n        transform-origin: center;\r\n        transform: rotate(0deg);\r\n    }\r\n    to {\r\n        transform-origin: center;\r\n        transform: rotate(360deg);\r\n    }\r\n}\r\n","/* Base */\n* {\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-tap-highlight-color: transparent;\n\n    &,\n    &::before,\n    &::after {\n        box-sizing: border-box;\n    }\n}\n\n@-ms-viewport {\n    width: auto;\n}\n\nhtml,\nbody {\n    -webkit-overflow-scrolling: touch;\n}\n\nhtml {\n    height: 100%;\n    font-size: var(--font-size-base);\n\n    &.rtl {\n        direction: rtl;\n\t\ttext-align: inherit;\n    }\n\n    @include media ('<lg-tablet') {\n        font-size: 92%;\n    }\n\n    @include media ('<sm-tablet') {\n        font-size: 86.5%;\n    }\n}\n\nbody {\n    display: flex;\n    flex-direction: column;\n    min-height: 100%;\n    margin: 0;\n    font: 400 1rem/1.5 var(--font-family-default);\n    font-feature-settings: var(--font-feature, normal);\n    font-variant: normal;\n    color: var(--text-color);\n    background-color: var(--white);\n    background-repeat: repeat;\n    background-position: 50% 0;\n    background-size: cover;\n    opacity: 0;\n    overflow: hidden;\n\n    @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n    }\n\n    &.load {\n        opacity: 1;\n        overflow: initial;\n        transition: var(--t-base);\n        transition-property: opacity;\n    }\n\n    .open-mobile-menu & {\n        overflow: hidden;\n    }\n}\n\na,\nbutton {\n    cursor: pointer;\n\n    &:focus {\n        outline: none;\n    }\n}\n\nbutton {\n    -webkit-appearance: none;\n    padding: 0;\n    border: none;\n    background-color: transparent;\n    box-shadow: none;\n}\n\nimg,\nembed,\nvideo {\n    display: inline-block;\n    max-width: 100%;\n    height: auto;\n    line-height: 1;\n    border: none;\n}\n\nsvg {\n    display: inline-block;\n    line-height: 1;\n\n    &:not([fill=\"none\"]) {\n        fill: currentColor;\n    }\n}\n\npicture {\n    flex-grow: 1;\n    border-radius: inherit;\n}\n","@charset 'UTF-8';\r\n\r\n//     _            _           _                           _ _\r\n//    (_)          | |         | |                         | (_)\r\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\r\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\r\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\r\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\r\n//\r\n//      Simple, elegant and maintainable media queries in Sass\r\n//                        v1.4.4\r\n//\r\n//                http://include-media.com\r\n//\r\n//         Authors: Eduardo Boucas (@eduardoboucas)\r\n//                  Hugo Giraudel (@hugogiraudel)\r\n//\r\n//      This project is licensed under the terms of the MIT license\r\n\r\n\r\n////\r\n/// include-media library public configuration\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n\r\n\r\n///\r\n/// Creates a list of global breakpoints\r\n///\r\n/// @example scss - Creates a single breakpoint with the label `phone`\r\n///  $breakpoints: ('phone': 320px);\r\n///\r\n\r\n///\r\n/// Creates a list of static expressions or media types\r\n///\r\n/// @example scss - Creates a single media type (screen)\r\n///  $media-expressions: ('screen': 'screen');\r\n///\r\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\r\n///  $media-expressions: (\r\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\r\n///  );\r\n///\r\n$media-expressions: (\r\n  'screen': 'screen',\r\n  'print': 'print',\r\n  'handheld': 'handheld',\r\n  'landscape': '(orientation: landscape)',\r\n  'portrait': '(orientation: portrait)',\r\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\r\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\r\n) !default;\r\n\r\n\r\n///\r\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\r\n///\r\n/// @example scss - Interval for pixels is defined as `1` by default\r\n///  @include media('>128px') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 129px) {}\r\n///\r\n/// @example scss - Interval for ems is defined as `0.01` by default\r\n///  @include media('>20em') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 20.01em) {}\r\n///\r\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\r\n///  @include media('>2.0rem') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 2.1rem) {}\r\n///\r\n$unit-intervals: (\r\n  'px': 1,\r\n  'em': 0.01,\r\n  'rem': 0.1\r\n) !default;\r\n\r\n///\r\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\r\n/// for browsers that don't support media queries.\r\n///\r\n/// @example scss - Disables support for media queries\r\n///  $im-media-support: false;\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n$im-media-support: true !default;\r\n\r\n///\r\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\r\n/// intercept the breakpoint will be displayed, any others will be ignored.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'tablet';\r\n///  @include media('>=desktop') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-breakpoint: 'desktop' !default;\r\n\r\n///\r\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\r\n/// are not supported.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'screen') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///   /* Generates: */\r\n///   .foo {\r\n///     color: tomato;\r\n///   }\r\n///\r\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'retina2x') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\r\n\r\n////\r\n/// Cross-engine logging engine\r\n/// @author Hugo Giraudel\r\n/// @access private\r\n////\r\n\r\n\r\n///\r\n/// Log a message either with `@error` if supported\r\n/// else with `@warn`, using `feature-exists('at-error')`\r\n/// to detect support.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@function log($message) {\r\n  @if feature-exists('at-error') {\r\n    @error $message;\r\n  } @else {\r\n    @warn $message;\r\n    $_: noop();\r\n  }\r\n\r\n  @return $message;\r\n}\r\n\r\n\r\n///\r\n/// Wrapper mixin for the log function so it can be used with a more friendly\r\n/// API than `@if log('..') {}` or `$_: log('..')`. Basically, use the function\r\n/// within functions because it is not possible to include a mixin in a function\r\n/// and use the mixin everywhere else because it's much more elegant.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@mixin log($message) {\r\n  @if log($message) {}\r\n}\r\n\r\n\r\n///\r\n/// Function with no `@return` called next to `@warn` in Sass 3.3\r\n/// to trigger a compiling error and stop the process.\r\n///\r\n@function noop() {}\r\n\r\n///\r\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\r\n///\r\n@function im-intercepts-static-breakpoint($conditions...) {\r\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\r\n\r\n  @if not $no-media-breakpoint-value {\r\n    @if log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\r\n  }\r\n\r\n  @each $condition in $conditions {\r\n    @if not map-has-key($media-expressions, $condition) {\r\n      $operator: get-expression-operator($condition);\r\n      $prefix: get-expression-prefix($operator);\r\n      $value: get-expression-value($condition, $operator);\r\n\r\n      // scss-lint:disable SpaceAroundOperator\r\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\r\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\r\n        @return false;\r\n      }\r\n    } @else if not index($im-no-media-expressions, $condition) {\r\n      @return false;\r\n    }\r\n  }\r\n\r\n  @return true;\r\n}\r\n\r\n////\r\n/// Parsing engine\r\n/// @author Hugo Giraudel\r\n/// @access private\r\n////\r\n\r\n\r\n///\r\n/// Get operator of an expression\r\n///\r\n/// @param {String} $expression - Expression to extract operator from\r\n///\r\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\r\n///\r\n@function get-expression-operator($expression) {\r\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\r\n    @if str-index($expression, $operator) {\r\n      @return $operator;\r\n    }\r\n  }\r\n\r\n  // It is not possible to include a mixin inside a function, so we have to\r\n  // rely on the `log(..)` function rather than the `log(..)` mixin. Because\r\n  // functions cannot be called anywhere in Sass, we need to hack the call in\r\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n  // Sass 3.3, change this line in `@if log(..) {}` instead.\r\n  $_: log('No operator found in `#{$expression}`.');\r\n}\r\n\r\n\r\n///\r\n/// Get dimension of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract dimension from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {String} - `width` or `height` (or potentially anything else)\r\n///\r\n@function get-expression-dimension($expression, $operator) {\r\n  $operator-index: str-index($expression, $operator);\r\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\r\n  $dimension: 'width';\r\n\r\n  @if str-length($parsed-dimension) > 0 {\r\n    $dimension: $parsed-dimension;\r\n  }\r\n\r\n  @return $dimension;\r\n}\r\n\r\n\r\n///\r\n/// Get dimension prefix based on an operator\r\n///\r\n/// @param {String} $operator - Operator\r\n///\r\n/// @return {String} - `min` or `max`\r\n///\r\n@function get-expression-prefix($operator) {\r\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\r\n}\r\n\r\n\r\n///\r\n/// Get value of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract value from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {Number} - A numeric value\r\n///\r\n@function get-expression-value($expression, $operator) {\r\n  $operator-index: str-index($expression, $operator);\r\n  $value: str-slice($expression, $operator-index + str-length($operator));\r\n\r\n  @if map-has-key($breakpoints, $value) {\r\n    $value: map-get($breakpoints, $value);\r\n  } @else {\r\n    $value: to-number($value);\r\n  }\r\n\r\n  $interval: map-get($unit-intervals, unit($value));\r\n\r\n  @if not $interval {\r\n    // It is not possible to include a mixin inside a function, so we have to\r\n    // rely on the `log(..)` function rather than the `log(..)` mixin. Because\r\n    // functions cannot be called anywhere in Sass, we need to hack the call in\r\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n    // Sass 3.3, change this line in `@if log(..) {}` instead.\r\n    $_: log('Unknown unit `#{unit($value)}`.');\r\n  }\r\n\r\n  @if $operator == '>' {\r\n    $value: $value + 0;\r\n  } @else if $operator == '<' {\r\n    $value: $value - $interval;\r\n  }\r\n\r\n  @return $value;\r\n}\r\n\r\n\r\n///\r\n/// Parse an expression to return a valid media-query expression\r\n///\r\n/// @param {String} $expression - Expression to parse\r\n///\r\n/// @return {String} - Valid media query\r\n///\r\n@function parse-expression($expression) {\r\n  // If it is part of $media-expressions, it has no operator\r\n  // then there is no need to go any further, just return the value\r\n  @if map-has-key($media-expressions, $expression) {\r\n    @return map-get($media-expressions, $expression);\r\n  }\r\n\r\n  $operator: get-expression-operator($expression);\r\n  $dimension: get-expression-dimension($expression, $operator);\r\n  $prefix: get-expression-prefix($operator);\r\n  $value: get-expression-value($expression, $operator);\r\n\r\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\r\n}\r\n\r\n///\r\n/// Slice `$list` between `$start` and `$end` indexes\r\n///\r\n/// @access private\r\n///\r\n/// @param {List} $list - List to slice\r\n/// @param {Number} $start [1] - Start index\r\n/// @param {Number} $end [length($list)] - End index\r\n///\r\n/// @return {List} Sliced list\r\n///\r\n@function slice($list, $start: 1, $end: length($list)) {\r\n  @if length($list) < 1 or $start > $end {\r\n    @return ();\r\n  }\r\n\r\n  $result: ();\r\n\r\n  @for $i from $start through $end {\r\n    $result: append($result, nth($list, $i));\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n////\r\n/// String to number converter\r\n/// @author Hugo Giraudel\r\n/// @access private\r\n////\r\n\r\n\r\n///\r\n/// Casts a string into a number\r\n///\r\n/// @param {String | Number} $value - Value to be parsed\r\n///\r\n/// @return {Number}\r\n///\r\n@function to-number($value) {\r\n  @if type-of($value) == 'number' {\r\n    @return $value;\r\n  } @else if type-of($value) != 'string' {\r\n    $_: log('Value for `to-number` should be a number or a string.');\r\n  }\r\n\r\n  $first-character: str-slice($value, 1, 1);\r\n  $result: 0;\r\n  $digits: 0;\r\n  $minus: ($first-character == '-');\r\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\r\n\r\n  // Remove +/- sign if present at first character\r\n  @if ($first-character == '+' or $first-character == '-') {\r\n    $value: str-slice($value, 2);\r\n  }\r\n\r\n  @for $i from 1 through str-length($value) {\r\n    $character: str-slice($value, $i, $i);\r\n\r\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\r\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\r\n    }\r\n\r\n    @if $character == '.' {\r\n      $digits: 1;\r\n    } @else if $digits == 0 {\r\n      $result: $result * 10 + map-get($numbers, $character);\r\n    } @else {\r\n      $digits: $digits * 10;\r\n      $result: $result + map-get($numbers, $character) / $digits;\r\n    }\r\n  }\r\n\r\n  @return if($minus, -$result, $result);\r\n}\r\n\r\n\r\n///\r\n/// Add `$unit` to `$value`\r\n///\r\n/// @param {Number} $value - Value to add unit to\r\n/// @param {String} $unit - String representation of the unit\r\n///\r\n/// @return {Number} - `$value` expressed in `$unit`\r\n///\r\n@function to-length($value, $unit) {\r\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\r\n\r\n  @if not index(map-keys($units), $unit) {\r\n    $_: log('Invalid unit `#{$unit}`.');\r\n  }\r\n\r\n  @return $value * map-get($units, $unit);\r\n}\r\n\r\n///\r\n/// This mixin aims at redefining the configuration just for the scope of\r\n/// the call. It is helpful when having a component needing an extended\r\n/// configuration such as custom breakpoints (referred to as tweakpoints)\r\n/// for instance.\r\n///\r\n/// @author Hugo Giraudel\r\n///\r\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\r\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\r\n///\r\n/// @example scss - Extend the global breakpoints with a tweakpoint\r\n///  @include media-context(('custom': 678px)) {\r\n///    .foo {\r\n///      @include media('>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend the global media expressions with a custom one\r\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend both configuration maps\r\n///  @include media-context(('custom': 678px), ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\r\n  // Save global configuration\r\n  $global-breakpoints: $breakpoints;\r\n  $global-media-expressions: $media-expressions;\r\n\r\n  // Update global configuration\r\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\r\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\r\n\r\n  @content;\r\n\r\n  // Restore global configuration\r\n  $breakpoints: $global-breakpoints !global;\r\n  $media-expressions: $global-media-expressions !global;\r\n}\r\n\r\n////\r\n/// include-media public exposed API\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n\r\n\r\n///\r\n/// Generates a media query based on a list of conditions\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @example scss - With a single set breakpoint\r\n///  @include media('>phone') { }\r\n///\r\n/// @example scss - With two set breakpoints\r\n///  @include media('>phone', '<=tablet') { }\r\n///\r\n/// @example scss - With custom values\r\n///  @include media('>=358px', '<850px') { }\r\n///\r\n/// @example scss - With set breakpoints with custom values\r\n///  @include media('>desktop', '<=1350px') { }\r\n///\r\n/// @example scss - With a static expression\r\n///  @include media('retina2x') { }\r\n///\r\n/// @example scss - Mixing everything\r\n///  @include media('>=350px', '<tablet', 'retina3x') { }\r\n///\r\n@mixin media($conditions...) {\r\n  // scss-lint:disable SpaceAroundOperator\r\n  @if ($im-media-support and length($conditions) == 0) or\r\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\r\n    @content;\r\n  } @else if ($im-media-support and length($conditions) > 0) {\r\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\r\n      // Recursive call\r\n      @include media(slice($conditions, 2)...) {\r\n        @content;\r\n      }\r\n    }\r\n  }\r\n}\r\n","/* Typography */\nh1,\n.h1,\nh2,\n.h2,\nh3,\n.h3,\nh4,\n.h4,\nh5,\n.h5,\nh6,\n.h6 {\n    font-weight: 300;\n    font-family: var(--font-family-secondary);\n}\n\nh1,\n.h1 {\n    margin-top: 0;\n    text-transform: uppercase;\n}\n\nh2,\n.h2 {\n    margin-top: 0;\n}\n\nh5,\n.h5 {\n    margin-top: 0;\n    margin-bottom: 14/15 * 1em;\n    font-size: 15/16 * 1rem;\n    line-height: 1.2;\n    text-transform: uppercase;\n}\n\np {\n    margin-bottom: 1.5rem;\n}\n\na {\n    color: inherit;\n    text-decoration: none;\n    transition: var(--t-base);\n\n    &:hover {\n        color: var(--primary-color);\n    }\n}\n\n.link-under {\n    border-bottom: 1px solid transparent;\n\n    &:hover {\n        border-bottom: 1px solid;\n    }\n}\n\n.no-under {\n    border-bottom: none !important;\n    text-decoration: none !important;\n}\n\nb {\n    font-weight: 700;\n}\n\nfigure {\n    margin-bottom: 1.5rem;\n}\n\n.list-styled {\n    padding-left: 0;\n    list-style: none;\n    font-weight: 300;\n    font-size: 18px;\n    line-height: 18/15*1em;\n    letter-spacing: 0.08em;\n\n    li {\n        margin-bottom: 1em;\n        position: relative;\n        padding-left: 1.25em;\n\n        &::before {\n            position: absolute;\n            top: 6/15*1em;\n            left: 0;\n            content: \"\";\n            width: 0;\n            height: 0;\n            border: 4px solid var(--primary-color);\n        }\n    }\n}\n","/* Buttons */\r\n.button {\r\n    background-color: none;\r\n    border: none;\r\n    outline: none;\r\n}","/* Forms */\r\ninput[type=\"search\"] {\r\n    box-sizing: border-box;\r\n}\r\n\r\n.input {\r\n    -webkit-appearance: none;\r\n    display: block;\r\n    width: 100%;\r\n    height: 3.125rem;\r\n    padding: 0.875rem 14px;\r\n    font-weight: 300;\r\n    font-size: 16px;\r\n    line-height: 21/16*1em;\r\n    letter-spacing: 0.08em;\r\n    font-family: var(--font-family-default);\r\n    background-color: var(--white-color);\r\n    border-radius: 0;\r\n    border: 1px solid var(--gray-color-1);\r\n    transition: var(--t-base);\r\n    transition-property: border-color, transform, background-color, opacity;\r\n\r\n    &::placeholder {\r\n        color: var(--gray);\r\n    }\r\n\r\n    &:hover,\r\n    &:focus {\r\n        border-color: var(--primary-color);\r\n    }\r\n\r\n    .error & {\r\n        border-color: var(--red);\r\n    }\r\n}\r\n\r\ntextarea {\r\n    resize: none;\r\n\r\n    &.input {\r\n        height: auto;\r\n    }\r\n}","/* Page */\r\n.page-wrapper {\r\n    flex-grow: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.page-content {\r\n    flex-grow: 1;\r\n}\r\n\r\n.container {\r\n    width: #{\"min(100%, var(--container-width))\"};\r\n    padding: 0 var(--container-gutter);\r\n    margin: 0 auto;\r\n}\r\n\r\n.section {\r\n    &__header {\r\n        margin-bottom: 5.625rem;\r\n    }\r\n}\r\n","/* Header */\n.header {\n    height: var(--header-height);\n}\n","/* Footer */\n.footer {\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n    padding: 1.5rem 0;\n    color: var(--white-color);\n    background-color: var(--black-color);\n\n    &__copyright {\n        font-size: 12px;\n        letter-spacing: 0.025em;\n        text-transform: uppercase;\n        text-align: center;\n    }\n}\n\n"]}